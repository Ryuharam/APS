Bootstrap
  홈페이지
    1. 다운로드
      $ npm i bootstrap@5.3.3
        npm : 
        우리는 설치하지 않고 사용 : package manager 설치 X
    2. CDN : Content delivery (Distribution) network
      <link href="">
      <script src="">
      CSS, JS 모두 가져와야 함
  Components
    - Alerts
    - Badges
        - 배지를 이용하여 작은 정보 구성
        - 배지는 em을 이용하여 직계 상위 요소의 크기에 맞게 조절됨
        - 배지와 버튼 차이 : 
    - Buttons
        - 부트스트랩에서는 버튼의 다양한 크기와 상태 등을 지원
    - Card
        - 다양한 변형 및 옵션을 포함하고 확장 가능한 카드 컨테이너를 제공
    - Carousel
        - 회전 목마와 같이 이미지 또는 텍스트가 순환하는 슬라이드 쇼 구성
    - Dropdowns
        - 드랍다운 메뉴를 사용할 수 있다.
    - Modal
        - 팝업이 아니라 사용자 화면을 하나 띄워 사용할 수 있음
    - Navs & tabs & Navbar
        - Naviation을 위해 목록을 사용할 수 있다.
    - Pagination
        - 여러 페이지에 존재를 알리기 위해 페이지를 표시할 수 있다.
  Utilities
    - Background & Colors
      - 배경색, 텍스트 컬러 등을 지정할 수 있다
    - Borders
      - 테두리에 대한 설정을 손쉽게 할 수 있다.
    - Flex
      - flexbox를 손 쉽게 사용할 수 있다.
    - Sizing
      - 반응형 크기를 쉽게 조절할 수 있다.
    - Spacing
      - LTR : 기본적인 normal flow. 왼 -> 우
      - RTL : 우 -> 왼
  Layout
    - Grid
      - 12개의 열과 6가지의 반응형 계층으로 조절
      - 기본적으로 wrap : 12 칸 넘어가면 자동으로 내려감
      - col-6, col-md-4 -> 화면이 클 때는 4칸, 작을 때는 6칸
Git
  git 상태 관리
    - git 
      - working directory
        - git status : 
          - 빨간 줄 -> untracked아직 staging area에 올라가지 않았다.
          - 초록 줄 -> commit 준비 완료
        - git add : 
          - '.' : 모든 파일 올림
          - a.txt b.txt : 여러개 올릴 때, 공백으로 나눔. 파일명에 공백이 있을 때는 ""로 묶어준다
          - commit -m '커밋 메세지' : 
            - '-m' : 옵션
          - log : 지금까지의 커밋 내용 알려줌
            - '--oneline' : 한 줄로 알려줌
            - HEAD : 내가 지금 있는 Branch
            - origin : 원격 저장소
            - HEAD랑 origin이 다르다면 push를 안 한 것
          - push 
          - pull 
          - clone 
      - staging area : .git
    - github
      - repository
  Git Branch
    - 여러 갈래로 작업 공간을 나누어 "독립적"으로 작업할 수 있도록 도와주는 Git의 도구
    - git flow : 브랜치 관리해주는 것
    
    Main (Master) : 
    Develop : 
    feature : ex) feature/login
    Release : 배포
    Hotfix : 배포 후 급박하게 바꿔야 할 때

    Git Branch의 필요성
      - 각 Branch는 독립 공간을 형성하기 때문에 원본 master || main 에 대해서 안전하게 보호
      - 하나의 작업은 하나의 Branch로 나누어 진행되어 체계적인 개발이 가능
        - 협업에 용이
    명령어
      - 브랜치 목록 확인
        - $ git branch : 로컬 저장소
        - $ git branch -r : 원격 저장소
        - 원격 저장소(github)에서 만들고 pull 받을 수 있으나 추천 안함
        - 깃허브는 클라우드로 공유할 때나 만든 것을 올릴 때만 사용하자
      - 새로운 브랜치 생성
        - $ git branch <브랜치 이름> -> 꺽쇄는 구분위해 쓴 것 그냥 브랜치 이름 쓰면 된다.
      - 특정 커밋 기준으로 브랜치 생성
        - $ git branch <브랜치 이름> <커밋 ID>
            -> log 확인한 후에 커밋 ID 7자리 작성
      - 브랜치 삭제 확인
        - $ git branch -d <브랜치 이름> : 병합된 브랜치만 삭제
        - $ git branch -D <브랜치 이름> : (주의) 강제 삭제
      - 그 외
        - revert
        - reset
      - 브랜치 이동
        - $ git switch <브랜치 이동>
        - $ git checkout <브랜치 이동>
      - 새로 생성과 동시에 이동
        - $ git switch -c <브랜치 이름>
      - 특정 커밋 기준으로 브랜치 생성과 동시에 이동
        - $ git switch -c <브랜치 이름> <커밋 ID>
    주의 사항
      - 브랜치 만들기 전에 1회 이상의 커밋이 반드시 존재해야 함! -> 시작점이 필요해서
      - 브랜치를 이동하기 전에는 반드시 커밋을 하고 이동 -> 커밋을 하지 않고 이동하면 이동 후 브랜치에 커밋 됨
  
